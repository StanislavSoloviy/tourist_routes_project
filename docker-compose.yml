version: '3.9'
services:

  #Frontend
  client:
    container_name: client
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
      - ${CLIENT_HOST_PORT:-3001}:${CLIENT_CONTAINER_PORT:-3000}
    #volumes:
      #- ./client:/app
    stdin_open: true
    tty: true
    environment:
      - NODE_ENV=development
      - CI=true

  #Backend
  app:
    container_name: app
    build:
      context: ./server/laravel
      dockerfile: Dockerfile
    volumes:
      - ./server/laravel:/var/www
    depends_on:
      - web
      - db
    env_file:
      - .env
    environment:
      - APP_KEY=${APP_KEY}

  #NGINX
  web:
    build:
      context: ./server/nginx
      dockerfile: Dockerfile
    container_name: web
    ports:
      - ${WEB_SERVER_PORT:-8080}:${WEB_SERVER_PORT:-8080}
    volumes:
      - ./server/laravel:/var/www

  db:
    image: postgres:15
    container_name: db
    ports:
      - ${DB_PORT:-5432}:${DB_PORT:-5432}
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_DB=${DB_DATABASE:-postgres}
      - POSTGRES_USER=${DB_USER:-root}
      - POSTGRES_PASSWORD=${DB_PASSWORD?}

  rabbitmq:
    image: 'rabbitmq:3.6-management-alpine'
    ports:
      # The standard AMQP protocol port
      - '5672:5672'
      # HTTP management UI
      - '15672:15672'
    environment:
      - AMQP_URL=${AMQP_URL}
      - RABBITMQ_VHOST=${RABBITMQ_VHOST}
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD?}
    networks:
      - network
networks:
  # Declare our private network.  We must declare one for the magic
  # Docker DNS to work, but otherwise its default settings are fine.
  network: { }
